{
  "contractName": "CustomSuperTokenBase",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Superfluid NOTE: - Because of how solidity lays out its storage variables and how custom   super tokens inherit the SuperToken standard implementation, it is   required that the custom token proxy pads its implementation   with reserved storage used by the Super Token implementation. - You will need to append your own proxy implementation after the base   - Refer to SETH.sol for an example how it is used.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Custom super token base contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/interfaces/superfluid/CustomSuperTokenBase.sol\":\"CustomSuperTokenBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0xe4e0b7e3f0265ffaa565d26acd2d45f2633f19127ed625e5a05a9f201a87a667\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1762b5bc15a009b5f092ccf547b81e0827c8705884f18e0623e497658514a7ed\",\"dweb:/ipfs/QmTtmVQYuynan3j2uVjdjjRJS1mr7LPRgxSZNnfqC7oxkz\"]},\"project:/contracts/interfaces/superfluid/CustomSuperTokenBase.sol\":{\"keccak256\":\"0x0e82d13439dcbcd79034168d1d85a37ab8ac65322b80e9cf938822383e8c092b\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://3a8bd45f533aa4e86ffb552a30a2ebc881657d350c076858c624c14419a123eb\",\"dweb:/ipfs/QmQBxtRAC9U4kZQtPwbsUTjMWa3UpKXUFedDYC44uK5HXZ\"]},\"project:/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x199095781e4221b6015d859558da09977f79199f38d342ab4899c2cecdf8cec1\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://9fd3a5a8b16d8517e2af10e20390a9af5adbfa4e783e3a7dd89eb4588db98385\",\"dweb:/ipfs/QmPDtGR43DeMMVsHjUh7FYzMGsFKPpGriRkaahFpN5T5d3\"]},\"project:/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xc3a6a907245116bcecc70fe4b207454012e8ce4fa190228fb8bbe39e0b1bc5cf\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://83c116bdae48685d20e5a27c942111e685ec1ef6334e7ff6f6d9af66edbd8025\",\"dweb:/ipfs/QmTnVuNTaRFiDmkAmDk7NFYdfQTW1kqgBZiY2exC6k8jDx\"]},\"project:/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0x42b604992cf67321cc12e8bed16543df0db4eaf125b8c1c82c330ebbeb20c014\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://7c18b00caf7b8be7e11f75284fb96263ce48a3984d56f2a91ec44cae4413d2fc\",\"dweb:/ipfs/QmWVzdW9KnkwAVe9g5zRuMoqCf7N89AoBfzzRr8puw5d8a\"]},\"project:/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xcff22ed43df0f34a645e6cbe0d7c5fd08f204d769e9095bc59d7c2fe6d11b7d6\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://944b8c5a37839b40ec8ee1ccfecbaf007808a61ea16c7b1351a7184606772032\",\"dweb:/ipfs/QmbUKZqZtVfqZMKYnQUygE4svatKuN9kT2ibrnxMuWXR7n\"]},\"project:/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x68a466c978557e47bd7385b1d7d78f1c8fb07462a870efc5a791008e33a4f535\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://d109879bdb7f022560a792af2ff481df729bf1b4b8e1831b8022f4d12892d41d\",\"dweb:/ipfs/QmRSWqHq8CP5XWgyV4mJpPxMg33s312s2K5ndHRHVqqZ8n\"]},\"project:/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0xf16efd1ba72322e77e0d936b723c0e71eb14c23e11cf69efae8c7caa407012cf\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://ff4bb321b72dc3332984346e5b66ad131c6132101658fe6707d7a9d043f981ab\",\"dweb:/ipfs/QmXmVD2mZ3LRb7wQZ2VcrpYhtjm21zUe5hPDDDJA1WXbFz\"]},\"project:/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0xea33d20751ffea4f4446bc04f6c10194fb4da0803a988586d41d49cf4859731c\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://7716b1f5eec0a7ac8780d82de4f0274ecd7059be4eec46c82b0b7adce110f10b\",\"dweb:/ipfs/QmWRQafvdCBsyfDYnevXSav1AAz8uZRRBwh2be5Z3vSfVN\"]},\"project:/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0x3eec5a3bf337cd319c1918fd1b16f350cf5f6850ac71f6859066fbf86e734ff4\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://cda19a2f5ca18e79c1e2300c8efac84c718df76c4fb313f59f84264a4c6b398a\",\"dweb:/ipfs/QmfQiwgDH5Q64w5ufBnDzVaeWv6WCZ6fLTrYu1FSYfBGhq\"]},\"project:/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0x66708dae3fcd06e6fc0a46f2959fc2d1e6b9361f28598337339d26af8eb8c0f9\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://77b80718cec21b81ef190c19fb9fbe73913a95c71f7e6715f671bbe8a224dafc\",\"dweb:/ipfs/QmUdsc6DF2Bgih5VZm7sfaECjhGmwE7tAx8pMkzGQgVKQw\"]},\"project:/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x70e573644a0ff271c0ccef526809e9d9ab4950ec58755ca84e833cde3b8f3df0\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://aea3709687cc37ba625f4cc882fbdb149a7bf5be5afe2b030203c8719641a77b\",\"dweb:/ipfs/QmVpvfR6ZheE5wNUK9CobaVBgVvEnEPkvjWF9cfwyZr7eQ\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\nimport {\n    ISuperToken\n} from \"../../interfaces/superfluid/ISuperToken.sol\";\n\n/**\n * @title Custom super token base contract\n * @author Superfluid\n * NOTE:\n * - Because of how solidity lays out its storage variables and how custom\n *   super tokens inherit the SuperToken standard implementation, it is\n *   required that the custom token proxy pads its implementation\n *   with reserved storage used by the Super Token implementation.\n * - You will need to append your own proxy implementation after the base\n *   - Refer to SETH.sol for an example how it is used.\n */\nabstract contract CustomSuperTokenBase {\n    // This (32) is the hard-coded number of storage slots used by the super token\n    uint256[32] internal _storagePaddings;\n}\n",
  "sourcePath": "/home/runner/work/protocol-monorepo/protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/CustomSuperTokenBase.sol",
  "ast": {
    "absolutePath": "project:/contracts/interfaces/superfluid/CustomSuperTokenBase.sol",
    "exportedSymbols": {
      "CustomSuperTokenBase": [
        16781
      ],
      "ISuperToken": [
        17761
      ]
    },
    "id": 16782,
    "license": "AGPLv3",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 16773,
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "35:25:41"
      },
      {
        "absolutePath": "project:/contracts/interfaces/superfluid/ISuperToken.sol",
        "file": "../../interfaces/superfluid/ISuperToken.sol",
        "id": 16775,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 16782,
        "sourceUnit": 17762,
        "src": "62:78:41",
        "symbolAliases": [
          {
            "foreign": {
              "id": 16774,
              "name": "ISuperToken",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 17761,
              "src": "75:11:41",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [],
        "canonicalName": "CustomSuperTokenBase",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 16776,
          "nodeType": "StructuredDocumentation",
          "src": "142:491:41",
          "text": " @title Custom super token base contract\n @author Superfluid\n NOTE:\n - Because of how solidity lays out its storage variables and how custom\n   super tokens inherit the SuperToken standard implementation, it is\n   required that the custom token proxy pads its implementation\n   with reserved storage used by the Super Token implementation.\n - You will need to append your own proxy implementation after the base\n   - Refer to SETH.sol for an example how it is used."
        },
        "fullyImplemented": true,
        "id": 16781,
        "linearizedBaseContracts": [
          16781
        ],
        "name": "CustomSuperTokenBase",
        "nameLocation": "652:20:41",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 16780,
            "mutability": "mutable",
            "name": "_storagePaddings",
            "nameLocation": "783:16:41",
            "nodeType": "VariableDeclaration",
            "scope": 16781,
            "src": "762:37:41",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$32_storage",
              "typeString": "uint256[32]"
            },
            "typeName": {
              "baseType": {
                "id": 16777,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "762:7:41",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 16779,
              "length": {
                "hexValue": "3332",
                "id": 16778,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "770:2:41",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_32_by_1",
                  "typeString": "int_const 32"
                },
                "value": "32"
              },
              "nodeType": "ArrayTypeName",
              "src": "762:11:41",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$32_storage_ptr",
                "typeString": "uint256[32]"
              }
            },
            "visibility": "internal"
          }
        ],
        "scope": 16782,
        "src": "634:168:41",
        "usedErrors": []
      }
    ],
    "src": "35:768:41"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.14+commit.80d49f37.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.7",
  "updatedAt": "2022-06-16T09:19:12.150Z",
  "devdoc": {
    "author": "Superfluid NOTE: - Because of how solidity lays out its storage variables and how custom   super tokens inherit the SuperToken standard implementation, it is   required that the custom token proxy pads its implementation   with reserved storage used by the Super Token implementation. - You will need to append your own proxy implementation after the base   - Refer to SETH.sol for an example how it is used.",
    "kind": "dev",
    "methods": {},
    "title": "Custom super token base contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}