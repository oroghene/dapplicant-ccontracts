/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ISuperfluidTokenInterface extends ethers.utils.Interface {
  functions: {
    "createAgreement(bytes32,bytes32[])": FunctionFragment;
    "getAccountActiveAgreements(address)": FunctionFragment;
    "getAgreementData(address,bytes32,uint256)": FunctionFragment;
    "getAgreementStateSlot(address,address,uint256,uint256)": FunctionFragment;
    "getHost()": FunctionFragment;
    "isAccountCritical(address,uint256)": FunctionFragment;
    "isAccountCriticalNow(address)": FunctionFragment;
    "isAccountSolvent(address,uint256)": FunctionFragment;
    "isAccountSolventNow(address)": FunctionFragment;
    "makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)": FunctionFragment;
    "realtimeBalanceOf(address,uint256)": FunctionFragment;
    "realtimeBalanceOfNow(address)": FunctionFragment;
    "settleBalance(address,int256)": FunctionFragment;
    "terminateAgreement(bytes32,uint256)": FunctionFragment;
    "updateAgreementData(bytes32,bytes32[])": FunctionFragment;
    "updateAgreementStateSlot(address,uint256,bytes32[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createAgreement",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountActiveAgreements",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgreementData",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgreementStateSlot",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getHost", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isAccountCritical",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountCriticalNow",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountSolvent",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountSolventNow",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "makeLiquidationPayoutsV2",
    values: [
      BytesLike,
      BytesLike,
      string,
      boolean,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "realtimeBalanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "realtimeBalanceOfNow",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "settleBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "terminateAgreement",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAgreementData",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAgreementStateSlot",
    values: [string, BigNumberish, BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "createAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountActiveAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgreementData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgreementStateSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAccountCritical",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountCriticalNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountSolvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountSolventNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeLiquidationPayoutsV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realtimeBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realtimeBalanceOfNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "terminateAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgreementData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgreementStateSlot",
    data: BytesLike
  ): Result;

  events: {
    "AgreementCreated(address,bytes32,bytes32[])": EventFragment;
    "AgreementLiquidated(address,bytes32,address,address,uint256)": EventFragment;
    "AgreementLiquidatedBy(address,address,bytes32,address,address,uint256,uint256)": EventFragment;
    "AgreementLiquidatedV2(address,bytes32,address,address,address,uint256,int256,bytes)": EventFragment;
    "AgreementStateUpdated(address,address,uint256)": EventFragment;
    "AgreementTerminated(address,bytes32)": EventFragment;
    "AgreementUpdated(address,bytes32,bytes32[])": EventFragment;
    "Bailout(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgreementCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementLiquidatedBy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementLiquidatedV2"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementStateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementTerminated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bailout"): EventFragment;
}

export class ISuperfluidToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ISuperfluidTokenInterface;

  functions: {
    createAgreement(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createAgreement(bytes32,bytes32[])"(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAccountActiveAgreements(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { activeAgreements: string[] }>;

    "getAccountActiveAgreements(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { activeAgreements: string[] }>;

    getAgreementData(
      agreementClass: string,
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { data: string[] }>;

    "getAgreementData(address,bytes32,uint256)"(
      agreementClass: string,
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { data: string[] }>;

    getAgreementStateSlot(
      agreementClass: string,
      account: string,
      slotId: BigNumberish,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { slotData: string[] }>;

    "getAgreementStateSlot(address,address,uint256,uint256)"(
      agreementClass: string,
      account: string,
      slotId: BigNumberish,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { slotData: string[] }>;

    getHost(overrides?: CallOverrides): Promise<[string] & { host: string }>;

    "getHost()"(
      overrides?: CallOverrides
    ): Promise<[string] & { host: string }>;

    isAccountCritical(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isCritical: boolean }>;

    "isAccountCritical(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isCritical: boolean }>;

    isAccountCriticalNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isCritical: boolean }>;

    "isAccountCriticalNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isCritical: boolean }>;

    isAccountSolvent(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isSolvent: boolean }>;

    "isAccountSolvent(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isSolvent: boolean }>;

    isAccountSolventNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isSolvent: boolean }>;

    "isAccountSolventNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isSolvent: boolean }>;

    makeLiquidationPayoutsV2(
      id: BytesLike,
      liquidationTypeData: BytesLike,
      liquidatorAccount: string,
      useDefaultRewardAccount: boolean,
      targetAccount: string,
      rewardAmount: BigNumberish,
      targetAccountBalanceDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)"(
      id: BytesLike,
      liquidationTypeData: BytesLike,
      liquidatorAccount: string,
      useDefaultRewardAccount: boolean,
      targetAccount: string,
      rewardAmount: BigNumberish,
      targetAccountBalanceDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    realtimeBalanceOf(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        availableBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    "realtimeBalanceOf(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        availableBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    realtimeBalanceOfNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        availableBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
        timestamp: BigNumber;
      }
    >;

    "realtimeBalanceOfNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        availableBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
        timestamp: BigNumber;
      }
    >;

    settleBalance(
      account: string,
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "settleBalance(address,int256)"(
      account: string,
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    terminateAgreement(
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "terminateAgreement(bytes32,uint256)"(
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateAgreementData(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateAgreementData(bytes32,bytes32[])"(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateAgreementStateSlot(
      account: string,
      slotId: BigNumberish,
      slotData: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateAgreementStateSlot(address,uint256,bytes32[])"(
      account: string,
      slotId: BigNumberish,
      slotData: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  createAgreement(
    id: BytesLike,
    data: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createAgreement(bytes32,bytes32[])"(
    id: BytesLike,
    data: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAccountActiveAgreements(
    account: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getAccountActiveAgreements(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getAgreementData(
    agreementClass: string,
    id: BytesLike,
    dataLength: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getAgreementData(address,bytes32,uint256)"(
    agreementClass: string,
    id: BytesLike,
    dataLength: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getAgreementStateSlot(
    agreementClass: string,
    account: string,
    slotId: BigNumberish,
    dataLength: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getAgreementStateSlot(address,address,uint256,uint256)"(
    agreementClass: string,
    account: string,
    slotId: BigNumberish,
    dataLength: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getHost(overrides?: CallOverrides): Promise<string>;

  "getHost()"(overrides?: CallOverrides): Promise<string>;

  isAccountCritical(
    account: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAccountCritical(address,uint256)"(
    account: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAccountCriticalNow(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAccountCriticalNow(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAccountSolvent(
    account: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAccountSolvent(address,uint256)"(
    account: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAccountSolventNow(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAccountSolventNow(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  makeLiquidationPayoutsV2(
    id: BytesLike,
    liquidationTypeData: BytesLike,
    liquidatorAccount: string,
    useDefaultRewardAccount: boolean,
    targetAccount: string,
    rewardAmount: BigNumberish,
    targetAccountBalanceDelta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)"(
    id: BytesLike,
    liquidationTypeData: BytesLike,
    liquidatorAccount: string,
    useDefaultRewardAccount: boolean,
    targetAccount: string,
    rewardAmount: BigNumberish,
    targetAccountBalanceDelta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  realtimeBalanceOf(
    account: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      availableBalance: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
    }
  >;

  "realtimeBalanceOf(address,uint256)"(
    account: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      availableBalance: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
    }
  >;

  realtimeBalanceOfNow(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      availableBalance: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
      timestamp: BigNumber;
    }
  >;

  "realtimeBalanceOfNow(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      availableBalance: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
      timestamp: BigNumber;
    }
  >;

  settleBalance(
    account: string,
    delta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "settleBalance(address,int256)"(
    account: string,
    delta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  terminateAgreement(
    id: BytesLike,
    dataLength: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "terminateAgreement(bytes32,uint256)"(
    id: BytesLike,
    dataLength: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateAgreementData(
    id: BytesLike,
    data: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateAgreementData(bytes32,bytes32[])"(
    id: BytesLike,
    data: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateAgreementStateSlot(
    account: string,
    slotId: BigNumberish,
    slotData: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateAgreementStateSlot(address,uint256,bytes32[])"(
    account: string,
    slotId: BigNumberish,
    slotData: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    createAgreement(
      id: BytesLike,
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "createAgreement(bytes32,bytes32[])"(
      id: BytesLike,
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountActiveAgreements(
      account: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getAccountActiveAgreements(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getAgreementData(
      agreementClass: string,
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getAgreementData(address,bytes32,uint256)"(
      agreementClass: string,
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getAgreementStateSlot(
      agreementClass: string,
      account: string,
      slotId: BigNumberish,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getAgreementStateSlot(address,address,uint256,uint256)"(
      agreementClass: string,
      account: string,
      slotId: BigNumberish,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getHost(overrides?: CallOverrides): Promise<string>;

    "getHost()"(overrides?: CallOverrides): Promise<string>;

    isAccountCritical(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAccountCritical(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAccountCriticalNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAccountCriticalNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAccountSolvent(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAccountSolvent(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAccountSolventNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAccountSolventNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    makeLiquidationPayoutsV2(
      id: BytesLike,
      liquidationTypeData: BytesLike,
      liquidatorAccount: string,
      useDefaultRewardAccount: boolean,
      targetAccount: string,
      rewardAmount: BigNumberish,
      targetAccountBalanceDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)"(
      id: BytesLike,
      liquidationTypeData: BytesLike,
      liquidatorAccount: string,
      useDefaultRewardAccount: boolean,
      targetAccount: string,
      rewardAmount: BigNumberish,
      targetAccountBalanceDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    realtimeBalanceOf(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        availableBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    "realtimeBalanceOf(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        availableBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    realtimeBalanceOfNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        availableBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
        timestamp: BigNumber;
      }
    >;

    "realtimeBalanceOfNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        availableBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
        timestamp: BigNumber;
      }
    >;

    settleBalance(
      account: string,
      delta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "settleBalance(address,int256)"(
      account: string,
      delta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    terminateAgreement(
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "terminateAgreement(bytes32,uint256)"(
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAgreementData(
      id: BytesLike,
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAgreementData(bytes32,bytes32[])"(
      id: BytesLike,
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateAgreementStateSlot(
      account: string,
      slotId: BigNumberish,
      slotData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAgreementStateSlot(address,uint256,bytes32[])"(
      account: string,
      slotId: BigNumberish,
      slotData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AgreementCreated(
      agreementClass: string | null,
      id: null,
      data: null
    ): EventFilter;

    AgreementLiquidated(
      agreementClass: string | null,
      id: null,
      penaltyAccount: string | null,
      rewardAccount: string | null,
      rewardAmount: null
    ): EventFilter;

    AgreementLiquidatedBy(
      liquidatorAccount: null,
      agreementClass: string | null,
      id: null,
      penaltyAccount: string | null,
      bondAccount: string | null,
      rewardAmount: null,
      bailoutAmount: null
    ): EventFilter;

    AgreementLiquidatedV2(
      agreementClass: string | null,
      id: null,
      liquidatorAccount: string | null,
      targetAccount: string | null,
      rewardAmountReceiver: null,
      rewardAmount: null,
      targetAccountBalanceDelta: null,
      liquidationTypeData: null
    ): EventFilter;

    AgreementStateUpdated(
      agreementClass: string | null,
      account: string | null,
      slotId: null
    ): EventFilter;

    AgreementTerminated(agreementClass: string | null, id: null): EventFilter;

    AgreementUpdated(
      agreementClass: string | null,
      id: null,
      data: null
    ): EventFilter;

    Bailout(bailoutAccount: string | null, bailoutAmount: null): EventFilter;
  };

  estimateGas: {
    createAgreement(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createAgreement(bytes32,bytes32[])"(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAccountActiveAgreements(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccountActiveAgreements(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAgreementData(
      agreementClass: string,
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAgreementData(address,bytes32,uint256)"(
      agreementClass: string,
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAgreementStateSlot(
      agreementClass: string,
      account: string,
      slotId: BigNumberish,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAgreementStateSlot(address,address,uint256,uint256)"(
      agreementClass: string,
      account: string,
      slotId: BigNumberish,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHost(overrides?: CallOverrides): Promise<BigNumber>;

    "getHost()"(overrides?: CallOverrides): Promise<BigNumber>;

    isAccountCritical(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAccountCritical(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAccountCriticalNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAccountCriticalNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAccountSolvent(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAccountSolvent(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAccountSolventNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAccountSolventNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeLiquidationPayoutsV2(
      id: BytesLike,
      liquidationTypeData: BytesLike,
      liquidatorAccount: string,
      useDefaultRewardAccount: boolean,
      targetAccount: string,
      rewardAmount: BigNumberish,
      targetAccountBalanceDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)"(
      id: BytesLike,
      liquidationTypeData: BytesLike,
      liquidatorAccount: string,
      useDefaultRewardAccount: boolean,
      targetAccount: string,
      rewardAmount: BigNumberish,
      targetAccountBalanceDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    realtimeBalanceOf(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "realtimeBalanceOf(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    realtimeBalanceOfNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "realtimeBalanceOfNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settleBalance(
      account: string,
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "settleBalance(address,int256)"(
      account: string,
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    terminateAgreement(
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "terminateAgreement(bytes32,uint256)"(
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateAgreementData(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateAgreementData(bytes32,bytes32[])"(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateAgreementStateSlot(
      account: string,
      slotId: BigNumberish,
      slotData: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateAgreementStateSlot(address,uint256,bytes32[])"(
      account: string,
      slotId: BigNumberish,
      slotData: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createAgreement(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createAgreement(bytes32,bytes32[])"(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAccountActiveAgreements(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccountActiveAgreements(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAgreementData(
      agreementClass: string,
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAgreementData(address,bytes32,uint256)"(
      agreementClass: string,
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAgreementStateSlot(
      agreementClass: string,
      account: string,
      slotId: BigNumberish,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAgreementStateSlot(address,address,uint256,uint256)"(
      agreementClass: string,
      account: string,
      slotId: BigNumberish,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getHost()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAccountCritical(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAccountCritical(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAccountCriticalNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAccountCriticalNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAccountSolvent(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAccountSolvent(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAccountSolventNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAccountSolventNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeLiquidationPayoutsV2(
      id: BytesLike,
      liquidationTypeData: BytesLike,
      liquidatorAccount: string,
      useDefaultRewardAccount: boolean,
      targetAccount: string,
      rewardAmount: BigNumberish,
      targetAccountBalanceDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)"(
      id: BytesLike,
      liquidationTypeData: BytesLike,
      liquidatorAccount: string,
      useDefaultRewardAccount: boolean,
      targetAccount: string,
      rewardAmount: BigNumberish,
      targetAccountBalanceDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    realtimeBalanceOf(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "realtimeBalanceOf(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    realtimeBalanceOfNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "realtimeBalanceOfNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settleBalance(
      account: string,
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "settleBalance(address,int256)"(
      account: string,
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    terminateAgreement(
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "terminateAgreement(bytes32,uint256)"(
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateAgreementData(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateAgreementData(bytes32,bytes32[])"(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateAgreementStateSlot(
      account: string,
      slotId: BigNumberish,
      slotData: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateAgreementStateSlot(address,uint256,bytes32[])"(
      account: string,
      slotId: BigNumberish,
      slotData: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
