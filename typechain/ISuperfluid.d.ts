/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ISuperfluidInterface extends ethers.utils.Interface {
  functions: {
    "addToAgreementClassesBitmap(uint256,bytes32)": FunctionFragment;
    "allowCompositeApp(address)": FunctionFragment;
    "appCallbackPop(bytes,int256)": FunctionFragment;
    "appCallbackPush(bytes,address,uint256,int256,address)": FunctionFragment;
    "batchCall(tuple[])": FunctionFragment;
    "callAgreement(address,bytes,bytes)": FunctionFragment;
    "callAgreementWithContext(address,bytes,bytes,bytes)": FunctionFragment;
    "callAppAction(address,bytes)": FunctionFragment;
    "callAppActionWithContext(address,bytes,bytes)": FunctionFragment;
    "callAppAfterCallback(address,bytes,bool,bytes)": FunctionFragment;
    "callAppBeforeCallback(address,bytes,bool,bytes)": FunctionFragment;
    "ctxUseAllowance(bytes,uint256,int256)": FunctionFragment;
    "decodeCtx(bytes)": FunctionFragment;
    "forwardBatchCall(tuple[])": FunctionFragment;
    "getAgreementClass(bytes32)": FunctionFragment;
    "getAppLevel(address)": FunctionFragment;
    "getAppManifest(address)": FunctionFragment;
    "getGovernance()": FunctionFragment;
    "getNow()": FunctionFragment;
    "getSuperTokenFactory()": FunctionFragment;
    "getSuperTokenFactoryLogic()": FunctionFragment;
    "isAgreementClassListed(address)": FunctionFragment;
    "isAgreementTypeListed(bytes32)": FunctionFragment;
    "isApp(address)": FunctionFragment;
    "isAppJailed(address)": FunctionFragment;
    "isCompositeAppAllowed(address,address)": FunctionFragment;
    "isCtxValid(bytes)": FunctionFragment;
    "jailApp(bytes,address,uint256)": FunctionFragment;
    "mapAgreementClasses(uint256)": FunctionFragment;
    "registerAgreementClass(address)": FunctionFragment;
    "registerApp(uint256)": FunctionFragment;
    "registerAppByFactory(address,uint256)": FunctionFragment;
    "registerAppWithKey(uint256,string)": FunctionFragment;
    "removeFromAgreementClassesBitmap(uint256,bytes32)": FunctionFragment;
    "replaceGovernance(address)": FunctionFragment;
    "updateAgreementClass(address)": FunctionFragment;
    "updateSuperTokenFactory(address)": FunctionFragment;
    "updateSuperTokenLogic(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addToAgreementClassesBitmap",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowCompositeApp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "appCallbackPop",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "appCallbackPush",
    values: [BytesLike, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCall",
    values: [{ operationType: BigNumberish; target: string; data: BytesLike }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "callAgreement",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callAgreementWithContext",
    values: [string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callAppAction",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callAppActionWithContext",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callAppAfterCallback",
    values: [string, BytesLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callAppBeforeCallback",
    values: [string, BytesLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ctxUseAllowance",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeCtx",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forwardBatchCall",
    values: [{ operationType: BigNumberish; target: string; data: BytesLike }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgreementClass",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getAppLevel", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAppManifest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNow", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSuperTokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSuperTokenFactoryLogic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAgreementClassListed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAgreementTypeListed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isApp", values: [string]): string;
  encodeFunctionData(functionFragment: "isAppJailed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isCompositeAppAllowed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCtxValid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "jailApp",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mapAgreementClasses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAgreementClass",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerApp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAppByFactory",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAppWithKey",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromAgreementClassesBitmap",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAgreementClass",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSuperTokenFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSuperTokenLogic",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToAgreementClassesBitmap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowCompositeApp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "appCallbackPop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "appCallbackPush",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callAgreementWithContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callAppAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callAppActionWithContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callAppAfterCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callAppBeforeCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ctxUseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decodeCtx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forwardBatchCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgreementClass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAppLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAppManifest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSuperTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSuperTokenFactoryLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAgreementClassListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAgreementTypeListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isApp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAppJailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCompositeAppAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isCtxValid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jailApp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mapAgreementClasses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAgreementClass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerApp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAppByFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAppWithKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromAgreementClassesBitmap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgreementClass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSuperTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSuperTokenLogic",
    data: BytesLike
  ): Result;

  events: {
    "AgreementClassRegistered(bytes32,address)": EventFragment;
    "AgreementClassUpdated(bytes32,address)": EventFragment;
    "AppRegistered(address)": EventFragment;
    "GovernanceReplaced(address,address)": EventFragment;
    "Jail(address,uint256)": EventFragment;
    "SuperTokenFactoryUpdated(address)": EventFragment;
    "SuperTokenLogicUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgreementClassRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementClassUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AppRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceReplaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Jail"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SuperTokenFactoryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SuperTokenLogicUpdated"): EventFragment;
}

export class ISuperfluid extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ISuperfluidInterface;

  functions: {
    addToAgreementClassesBitmap(
      bitmap: BigNumberish,
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { newBitmap: BigNumber }>;

    "addToAgreementClassesBitmap(uint256,bytes32)"(
      bitmap: BigNumberish,
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { newBitmap: BigNumber }>;

    allowCompositeApp(
      targetApp: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "allowCompositeApp(address)"(
      targetApp: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    appCallbackPop(
      ctx: BytesLike,
      appAllowanceUsedDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "appCallbackPop(bytes,int256)"(
      ctx: BytesLike,
      appAllowanceUsedDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    appCallbackPush(
      ctx: BytesLike,
      app: string,
      appAllowanceGranted: BigNumberish,
      appAllowanceUsed: BigNumberish,
      appAllowanceToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "appCallbackPush(bytes,address,uint256,int256,address)"(
      ctx: BytesLike,
      app: string,
      appAllowanceGranted: BigNumberish,
      appAllowanceUsed: BigNumberish,
      appAllowanceToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    batchCall(
      operations: {
        operationType: BigNumberish;
        target: string;
        data: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "batchCall(tuple[])"(
      operations: {
        operationType: BigNumberish;
        target: string;
        data: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    callAgreement(
      agreementClass: string,
      callData: BytesLike,
      userData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "callAgreement(address,bytes,bytes)"(
      agreementClass: string,
      callData: BytesLike,
      userData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    callAgreementWithContext(
      agreementClass: string,
      callData: BytesLike,
      userData: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "callAgreementWithContext(address,bytes,bytes,bytes)"(
      agreementClass: string,
      callData: BytesLike,
      userData: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    callAppAction(
      app: string,
      callData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "callAppAction(address,bytes)"(
      app: string,
      callData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    callAppActionWithContext(
      app: string,
      callData: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "callAppActionWithContext(address,bytes,bytes)"(
      app: string,
      callData: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    callAppAfterCallback(
      app: string,
      callData: BytesLike,
      isTermination: boolean,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "callAppAfterCallback(address,bytes,bool,bytes)"(
      app: string,
      callData: BytesLike,
      isTermination: boolean,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    callAppBeforeCallback(
      app: string,
      callData: BytesLike,
      isTermination: boolean,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "callAppBeforeCallback(address,bytes,bool,bytes)"(
      app: string,
      callData: BytesLike,
      isTermination: boolean,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ctxUseAllowance(
      ctx: BytesLike,
      appAllowanceWantedMore: BigNumberish,
      appAllowanceUsedDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ctxUseAllowance(bytes,uint256,int256)"(
      ctx: BytesLike,
      appAllowanceWantedMore: BigNumberish,
      appAllowanceUsedDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decodeCtx(
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          number,
          number,
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          appLevel: number;
          callType: number;
          timestamp: BigNumber;
          msgSender: string;
          agreementSelector: string;
          userData: string;
          appAllowanceGranted: BigNumber;
          appAllowanceWanted: BigNumber;
          appAllowanceUsed: BigNumber;
          appAddress: string;
          appAllowanceToken: string;
        }
      ] & {
        context: [
          number,
          number,
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          appLevel: number;
          callType: number;
          timestamp: BigNumber;
          msgSender: string;
          agreementSelector: string;
          userData: string;
          appAllowanceGranted: BigNumber;
          appAllowanceWanted: BigNumber;
          appAllowanceUsed: BigNumber;
          appAddress: string;
          appAllowanceToken: string;
        };
      }
    >;

    "decodeCtx(bytes)"(
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          number,
          number,
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          appLevel: number;
          callType: number;
          timestamp: BigNumber;
          msgSender: string;
          agreementSelector: string;
          userData: string;
          appAllowanceGranted: BigNumber;
          appAllowanceWanted: BigNumber;
          appAllowanceUsed: BigNumber;
          appAddress: string;
          appAllowanceToken: string;
        }
      ] & {
        context: [
          number,
          number,
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          appLevel: number;
          callType: number;
          timestamp: BigNumber;
          msgSender: string;
          agreementSelector: string;
          userData: string;
          appAllowanceGranted: BigNumber;
          appAllowanceWanted: BigNumber;
          appAllowanceUsed: BigNumber;
          appAddress: string;
          appAllowanceToken: string;
        };
      }
    >;

    forwardBatchCall(
      operations: {
        operationType: BigNumberish;
        target: string;
        data: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "forwardBatchCall(tuple[])"(
      operations: {
        operationType: BigNumberish;
        target: string;
        data: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAgreementClass(
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { agreementClass: string }>;

    "getAgreementClass(bytes32)"(
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { agreementClass: string }>;

    getAppLevel(
      app: string,
      overrides?: CallOverrides
    ): Promise<[number] & { appLevel: number }>;

    "getAppLevel(address)"(
      app: string,
      overrides?: CallOverrides
    ): Promise<[number] & { appLevel: number }>;

    getAppManifest(
      app: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        isSuperApp: boolean;
        isJailed: boolean;
        noopMask: BigNumber;
      }
    >;

    "getAppManifest(address)"(
      app: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        isSuperApp: boolean;
        isJailed: boolean;
        noopMask: BigNumber;
      }
    >;

    getGovernance(
      overrides?: CallOverrides
    ): Promise<[string] & { governance: string }>;

    "getGovernance()"(
      overrides?: CallOverrides
    ): Promise<[string] & { governance: string }>;

    getNow(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getNow()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSuperTokenFactory(
      overrides?: CallOverrides
    ): Promise<[string] & { factory: string }>;

    "getSuperTokenFactory()"(
      overrides?: CallOverrides
    ): Promise<[string] & { factory: string }>;

    getSuperTokenFactoryLogic(
      overrides?: CallOverrides
    ): Promise<[string] & { logic: string }>;

    "getSuperTokenFactoryLogic()"(
      overrides?: CallOverrides
    ): Promise<[string] & { logic: string }>;

    isAgreementClassListed(
      agreementClass: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { yes: boolean }>;

    "isAgreementClassListed(address)"(
      agreementClass: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { yes: boolean }>;

    isAgreementTypeListed(
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { yes: boolean }>;

    "isAgreementTypeListed(bytes32)"(
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { yes: boolean }>;

    isApp(app: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isApp(address)"(
      app: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAppJailed(
      app: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isJail: boolean }>;

    "isAppJailed(address)"(
      app: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isJail: boolean }>;

    isCompositeAppAllowed(
      app: string,
      targetApp: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isAppAllowed: boolean }>;

    "isCompositeAppAllowed(address,address)"(
      app: string,
      targetApp: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isAppAllowed: boolean }>;

    isCtxValid(ctx: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    "isCtxValid(bytes)"(
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    jailApp(
      ctx: BytesLike,
      app: string,
      reason: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "jailApp(bytes,address,uint256)"(
      ctx: BytesLike,
      app: string,
      reason: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mapAgreementClasses(
      bitmap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { agreementClasses: string[] }>;

    "mapAgreementClasses(uint256)"(
      bitmap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { agreementClasses: string[] }>;

    registerAgreementClass(
      agreementClassLogic: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerAgreementClass(address)"(
      agreementClassLogic: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registerApp(
      configWord: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerApp(uint256)"(
      configWord: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registerAppByFactory(
      app: string,
      configWord: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerAppByFactory(address,uint256)"(
      app: string,
      configWord: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registerAppWithKey(
      configWord: BigNumberish,
      registrationKey: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerAppWithKey(uint256,string)"(
      configWord: BigNumberish,
      registrationKey: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeFromAgreementClassesBitmap(
      bitmap: BigNumberish,
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { newBitmap: BigNumber }>;

    "removeFromAgreementClassesBitmap(uint256,bytes32)"(
      bitmap: BigNumberish,
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { newBitmap: BigNumber }>;

    replaceGovernance(
      newGov: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "replaceGovernance(address)"(
      newGov: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateAgreementClass(
      agreementClassLogic: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateAgreementClass(address)"(
      agreementClassLogic: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateSuperTokenFactory(
      newFactory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateSuperTokenFactory(address)"(
      newFactory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateSuperTokenLogic(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateSuperTokenLogic(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addToAgreementClassesBitmap(
    bitmap: BigNumberish,
    agreementType: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "addToAgreementClassesBitmap(uint256,bytes32)"(
    bitmap: BigNumberish,
    agreementType: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowCompositeApp(
    targetApp: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "allowCompositeApp(address)"(
    targetApp: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  appCallbackPop(
    ctx: BytesLike,
    appAllowanceUsedDelta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "appCallbackPop(bytes,int256)"(
    ctx: BytesLike,
    appAllowanceUsedDelta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  appCallbackPush(
    ctx: BytesLike,
    app: string,
    appAllowanceGranted: BigNumberish,
    appAllowanceUsed: BigNumberish,
    appAllowanceToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "appCallbackPush(bytes,address,uint256,int256,address)"(
    ctx: BytesLike,
    app: string,
    appAllowanceGranted: BigNumberish,
    appAllowanceUsed: BigNumberish,
    appAllowanceToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  batchCall(
    operations: {
      operationType: BigNumberish;
      target: string;
      data: BytesLike;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "batchCall(tuple[])"(
    operations: {
      operationType: BigNumberish;
      target: string;
      data: BytesLike;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callAgreement(
    agreementClass: string,
    callData: BytesLike,
    userData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "callAgreement(address,bytes,bytes)"(
    agreementClass: string,
    callData: BytesLike,
    userData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callAgreementWithContext(
    agreementClass: string,
    callData: BytesLike,
    userData: BytesLike,
    ctx: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "callAgreementWithContext(address,bytes,bytes,bytes)"(
    agreementClass: string,
    callData: BytesLike,
    userData: BytesLike,
    ctx: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callAppAction(
    app: string,
    callData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "callAppAction(address,bytes)"(
    app: string,
    callData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callAppActionWithContext(
    app: string,
    callData: BytesLike,
    ctx: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "callAppActionWithContext(address,bytes,bytes)"(
    app: string,
    callData: BytesLike,
    ctx: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callAppAfterCallback(
    app: string,
    callData: BytesLike,
    isTermination: boolean,
    ctx: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "callAppAfterCallback(address,bytes,bool,bytes)"(
    app: string,
    callData: BytesLike,
    isTermination: boolean,
    ctx: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callAppBeforeCallback(
    app: string,
    callData: BytesLike,
    isTermination: boolean,
    ctx: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "callAppBeforeCallback(address,bytes,bool,bytes)"(
    app: string,
    callData: BytesLike,
    isTermination: boolean,
    ctx: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ctxUseAllowance(
    ctx: BytesLike,
    appAllowanceWantedMore: BigNumberish,
    appAllowanceUsedDelta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ctxUseAllowance(bytes,uint256,int256)"(
    ctx: BytesLike,
    appAllowanceWantedMore: BigNumberish,
    appAllowanceUsedDelta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decodeCtx(
    ctx: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string
    ] & {
      appLevel: number;
      callType: number;
      timestamp: BigNumber;
      msgSender: string;
      agreementSelector: string;
      userData: string;
      appAllowanceGranted: BigNumber;
      appAllowanceWanted: BigNumber;
      appAllowanceUsed: BigNumber;
      appAddress: string;
      appAllowanceToken: string;
    }
  >;

  "decodeCtx(bytes)"(
    ctx: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string
    ] & {
      appLevel: number;
      callType: number;
      timestamp: BigNumber;
      msgSender: string;
      agreementSelector: string;
      userData: string;
      appAllowanceGranted: BigNumber;
      appAllowanceWanted: BigNumber;
      appAllowanceUsed: BigNumber;
      appAddress: string;
      appAllowanceToken: string;
    }
  >;

  forwardBatchCall(
    operations: {
      operationType: BigNumberish;
      target: string;
      data: BytesLike;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "forwardBatchCall(tuple[])"(
    operations: {
      operationType: BigNumberish;
      target: string;
      data: BytesLike;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAgreementClass(
    agreementType: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getAgreementClass(bytes32)"(
    agreementType: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getAppLevel(app: string, overrides?: CallOverrides): Promise<number>;

  "getAppLevel(address)"(
    app: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getAppManifest(
    app: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber] & {
      isSuperApp: boolean;
      isJailed: boolean;
      noopMask: BigNumber;
    }
  >;

  "getAppManifest(address)"(
    app: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber] & {
      isSuperApp: boolean;
      isJailed: boolean;
      noopMask: BigNumber;
    }
  >;

  getGovernance(overrides?: CallOverrides): Promise<string>;

  "getGovernance()"(overrides?: CallOverrides): Promise<string>;

  getNow(overrides?: CallOverrides): Promise<BigNumber>;

  "getNow()"(overrides?: CallOverrides): Promise<BigNumber>;

  getSuperTokenFactory(overrides?: CallOverrides): Promise<string>;

  "getSuperTokenFactory()"(overrides?: CallOverrides): Promise<string>;

  getSuperTokenFactoryLogic(overrides?: CallOverrides): Promise<string>;

  "getSuperTokenFactoryLogic()"(overrides?: CallOverrides): Promise<string>;

  isAgreementClassListed(
    agreementClass: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAgreementClassListed(address)"(
    agreementClass: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAgreementTypeListed(
    agreementType: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAgreementTypeListed(bytes32)"(
    agreementType: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApp(app: string, overrides?: CallOverrides): Promise<boolean>;

  "isApp(address)"(app: string, overrides?: CallOverrides): Promise<boolean>;

  isAppJailed(app: string, overrides?: CallOverrides): Promise<boolean>;

  "isAppJailed(address)"(
    app: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCompositeAppAllowed(
    app: string,
    targetApp: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isCompositeAppAllowed(address,address)"(
    app: string,
    targetApp: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCtxValid(ctx: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "isCtxValid(bytes)"(
    ctx: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  jailApp(
    ctx: BytesLike,
    app: string,
    reason: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "jailApp(bytes,address,uint256)"(
    ctx: BytesLike,
    app: string,
    reason: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mapAgreementClasses(
    bitmap: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "mapAgreementClasses(uint256)"(
    bitmap: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  registerAgreementClass(
    agreementClassLogic: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerAgreementClass(address)"(
    agreementClassLogic: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registerApp(
    configWord: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerApp(uint256)"(
    configWord: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registerAppByFactory(
    app: string,
    configWord: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerAppByFactory(address,uint256)"(
    app: string,
    configWord: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registerAppWithKey(
    configWord: BigNumberish,
    registrationKey: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerAppWithKey(uint256,string)"(
    configWord: BigNumberish,
    registrationKey: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeFromAgreementClassesBitmap(
    bitmap: BigNumberish,
    agreementType: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "removeFromAgreementClassesBitmap(uint256,bytes32)"(
    bitmap: BigNumberish,
    agreementType: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  replaceGovernance(
    newGov: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "replaceGovernance(address)"(
    newGov: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateAgreementClass(
    agreementClassLogic: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateAgreementClass(address)"(
    agreementClassLogic: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateSuperTokenFactory(
    newFactory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateSuperTokenFactory(address)"(
    newFactory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateSuperTokenLogic(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateSuperTokenLogic(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addToAgreementClassesBitmap(
      bitmap: BigNumberish,
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addToAgreementClassesBitmap(uint256,bytes32)"(
      bitmap: BigNumberish,
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowCompositeApp(
      targetApp: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "allowCompositeApp(address)"(
      targetApp: string,
      overrides?: CallOverrides
    ): Promise<void>;

    appCallbackPop(
      ctx: BytesLike,
      appAllowanceUsedDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "appCallbackPop(bytes,int256)"(
      ctx: BytesLike,
      appAllowanceUsedDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    appCallbackPush(
      ctx: BytesLike,
      app: string,
      appAllowanceGranted: BigNumberish,
      appAllowanceUsed: BigNumberish,
      appAllowanceToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "appCallbackPush(bytes,address,uint256,int256,address)"(
      ctx: BytesLike,
      app: string,
      appAllowanceGranted: BigNumberish,
      appAllowanceUsed: BigNumberish,
      appAllowanceToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    batchCall(
      operations: {
        operationType: BigNumberish;
        target: string;
        data: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchCall(tuple[])"(
      operations: {
        operationType: BigNumberish;
        target: string;
        data: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    callAgreement(
      agreementClass: string,
      callData: BytesLike,
      userData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "callAgreement(address,bytes,bytes)"(
      agreementClass: string,
      callData: BytesLike,
      userData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    callAgreementWithContext(
      agreementClass: string,
      callData: BytesLike,
      userData: BytesLike,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string] & { newCtx: string; returnedData: string }>;

    "callAgreementWithContext(address,bytes,bytes,bytes)"(
      agreementClass: string,
      callData: BytesLike,
      userData: BytesLike,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string] & { newCtx: string; returnedData: string }>;

    callAppAction(
      app: string,
      callData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "callAppAction(address,bytes)"(
      app: string,
      callData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    callAppActionWithContext(
      app: string,
      callData: BytesLike,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "callAppActionWithContext(address,bytes,bytes)"(
      app: string,
      callData: BytesLike,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    callAppAfterCallback(
      app: string,
      callData: BytesLike,
      isTermination: boolean,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "callAppAfterCallback(address,bytes,bool,bytes)"(
      app: string,
      callData: BytesLike,
      isTermination: boolean,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    callAppBeforeCallback(
      app: string,
      callData: BytesLike,
      isTermination: boolean,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "callAppBeforeCallback(address,bytes,bool,bytes)"(
      app: string,
      callData: BytesLike,
      isTermination: boolean,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    ctxUseAllowance(
      ctx: BytesLike,
      appAllowanceWantedMore: BigNumberish,
      appAllowanceUsedDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "ctxUseAllowance(bytes,uint256,int256)"(
      ctx: BytesLike,
      appAllowanceWantedMore: BigNumberish,
      appAllowanceUsedDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    decodeCtx(
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        appLevel: number;
        callType: number;
        timestamp: BigNumber;
        msgSender: string;
        agreementSelector: string;
        userData: string;
        appAllowanceGranted: BigNumber;
        appAllowanceWanted: BigNumber;
        appAllowanceUsed: BigNumber;
        appAddress: string;
        appAllowanceToken: string;
      }
    >;

    "decodeCtx(bytes)"(
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        appLevel: number;
        callType: number;
        timestamp: BigNumber;
        msgSender: string;
        agreementSelector: string;
        userData: string;
        appAllowanceGranted: BigNumber;
        appAllowanceWanted: BigNumber;
        appAllowanceUsed: BigNumber;
        appAddress: string;
        appAllowanceToken: string;
      }
    >;

    forwardBatchCall(
      operations: {
        operationType: BigNumberish;
        target: string;
        data: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "forwardBatchCall(tuple[])"(
      operations: {
        operationType: BigNumberish;
        target: string;
        data: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAgreementClass(
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAgreementClass(bytes32)"(
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getAppLevel(app: string, overrides?: CallOverrides): Promise<number>;

    "getAppLevel(address)"(
      app: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getAppManifest(
      app: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        isSuperApp: boolean;
        isJailed: boolean;
        noopMask: BigNumber;
      }
    >;

    "getAppManifest(address)"(
      app: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        isSuperApp: boolean;
        isJailed: boolean;
        noopMask: BigNumber;
      }
    >;

    getGovernance(overrides?: CallOverrides): Promise<string>;

    "getGovernance()"(overrides?: CallOverrides): Promise<string>;

    getNow(overrides?: CallOverrides): Promise<BigNumber>;

    "getNow()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSuperTokenFactory(overrides?: CallOverrides): Promise<string>;

    "getSuperTokenFactory()"(overrides?: CallOverrides): Promise<string>;

    getSuperTokenFactoryLogic(overrides?: CallOverrides): Promise<string>;

    "getSuperTokenFactoryLogic()"(overrides?: CallOverrides): Promise<string>;

    isAgreementClassListed(
      agreementClass: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAgreementClassListed(address)"(
      agreementClass: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAgreementTypeListed(
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAgreementTypeListed(bytes32)"(
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApp(app: string, overrides?: CallOverrides): Promise<boolean>;

    "isApp(address)"(app: string, overrides?: CallOverrides): Promise<boolean>;

    isAppJailed(app: string, overrides?: CallOverrides): Promise<boolean>;

    "isAppJailed(address)"(
      app: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCompositeAppAllowed(
      app: string,
      targetApp: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isCompositeAppAllowed(address,address)"(
      app: string,
      targetApp: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCtxValid(ctx: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "isCtxValid(bytes)"(
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    jailApp(
      ctx: BytesLike,
      app: string,
      reason: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "jailApp(bytes,address,uint256)"(
      ctx: BytesLike,
      app: string,
      reason: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    mapAgreementClasses(
      bitmap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "mapAgreementClasses(uint256)"(
      bitmap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    registerAgreementClass(
      agreementClassLogic: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerAgreementClass(address)"(
      agreementClassLogic: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerApp(
      configWord: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerApp(uint256)"(
      configWord: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerAppByFactory(
      app: string,
      configWord: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerAppByFactory(address,uint256)"(
      app: string,
      configWord: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerAppWithKey(
      configWord: BigNumberish,
      registrationKey: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerAppWithKey(uint256,string)"(
      configWord: BigNumberish,
      registrationKey: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromAgreementClassesBitmap(
      bitmap: BigNumberish,
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "removeFromAgreementClassesBitmap(uint256,bytes32)"(
      bitmap: BigNumberish,
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    replaceGovernance(newGov: string, overrides?: CallOverrides): Promise<void>;

    "replaceGovernance(address)"(
      newGov: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAgreementClass(
      agreementClassLogic: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAgreementClass(address)"(
      agreementClassLogic: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSuperTokenFactory(
      newFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateSuperTokenFactory(address)"(
      newFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSuperTokenLogic(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateSuperTokenLogic(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AgreementClassRegistered(agreementType: null, code: null): EventFilter;

    AgreementClassUpdated(agreementType: null, code: null): EventFilter;

    AppRegistered(app: string | null): EventFilter;

    GovernanceReplaced(oldGov: null, newGov: null): EventFilter;

    Jail(app: string | null, reason: null): EventFilter;

    SuperTokenFactoryUpdated(newFactory: null): EventFilter;

    SuperTokenLogicUpdated(token: string | null, code: null): EventFilter;
  };

  estimateGas: {
    addToAgreementClassesBitmap(
      bitmap: BigNumberish,
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addToAgreementClassesBitmap(uint256,bytes32)"(
      bitmap: BigNumberish,
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowCompositeApp(
      targetApp: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "allowCompositeApp(address)"(
      targetApp: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    appCallbackPop(
      ctx: BytesLike,
      appAllowanceUsedDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "appCallbackPop(bytes,int256)"(
      ctx: BytesLike,
      appAllowanceUsedDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    appCallbackPush(
      ctx: BytesLike,
      app: string,
      appAllowanceGranted: BigNumberish,
      appAllowanceUsed: BigNumberish,
      appAllowanceToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "appCallbackPush(bytes,address,uint256,int256,address)"(
      ctx: BytesLike,
      app: string,
      appAllowanceGranted: BigNumberish,
      appAllowanceUsed: BigNumberish,
      appAllowanceToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    batchCall(
      operations: {
        operationType: BigNumberish;
        target: string;
        data: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "batchCall(tuple[])"(
      operations: {
        operationType: BigNumberish;
        target: string;
        data: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    callAgreement(
      agreementClass: string,
      callData: BytesLike,
      userData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "callAgreement(address,bytes,bytes)"(
      agreementClass: string,
      callData: BytesLike,
      userData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    callAgreementWithContext(
      agreementClass: string,
      callData: BytesLike,
      userData: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "callAgreementWithContext(address,bytes,bytes,bytes)"(
      agreementClass: string,
      callData: BytesLike,
      userData: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    callAppAction(
      app: string,
      callData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "callAppAction(address,bytes)"(
      app: string,
      callData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    callAppActionWithContext(
      app: string,
      callData: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "callAppActionWithContext(address,bytes,bytes)"(
      app: string,
      callData: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    callAppAfterCallback(
      app: string,
      callData: BytesLike,
      isTermination: boolean,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "callAppAfterCallback(address,bytes,bool,bytes)"(
      app: string,
      callData: BytesLike,
      isTermination: boolean,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    callAppBeforeCallback(
      app: string,
      callData: BytesLike,
      isTermination: boolean,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "callAppBeforeCallback(address,bytes,bool,bytes)"(
      app: string,
      callData: BytesLike,
      isTermination: boolean,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    ctxUseAllowance(
      ctx: BytesLike,
      appAllowanceWantedMore: BigNumberish,
      appAllowanceUsedDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ctxUseAllowance(bytes,uint256,int256)"(
      ctx: BytesLike,
      appAllowanceWantedMore: BigNumberish,
      appAllowanceUsedDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decodeCtx(ctx: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "decodeCtx(bytes)"(
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forwardBatchCall(
      operations: {
        operationType: BigNumberish;
        target: string;
        data: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "forwardBatchCall(tuple[])"(
      operations: {
        operationType: BigNumberish;
        target: string;
        data: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAgreementClass(
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAgreementClass(bytes32)"(
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAppLevel(app: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getAppLevel(address)"(
      app: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAppManifest(app: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getAppManifest(address)"(
      app: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    "getGovernance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNow(overrides?: CallOverrides): Promise<BigNumber>;

    "getNow()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSuperTokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "getSuperTokenFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSuperTokenFactoryLogic(overrides?: CallOverrides): Promise<BigNumber>;

    "getSuperTokenFactoryLogic()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAgreementClassListed(
      agreementClass: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAgreementClassListed(address)"(
      agreementClass: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAgreementTypeListed(
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAgreementTypeListed(bytes32)"(
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApp(app: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isApp(address)"(
      app: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAppJailed(app: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isAppJailed(address)"(
      app: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCompositeAppAllowed(
      app: string,
      targetApp: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isCompositeAppAllowed(address,address)"(
      app: string,
      targetApp: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCtxValid(ctx: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "isCtxValid(bytes)"(
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jailApp(
      ctx: BytesLike,
      app: string,
      reason: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "jailApp(bytes,address,uint256)"(
      ctx: BytesLike,
      app: string,
      reason: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mapAgreementClasses(
      bitmap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mapAgreementClasses(uint256)"(
      bitmap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerAgreementClass(
      agreementClassLogic: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerAgreementClass(address)"(
      agreementClassLogic: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registerApp(
      configWord: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerApp(uint256)"(
      configWord: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registerAppByFactory(
      app: string,
      configWord: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerAppByFactory(address,uint256)"(
      app: string,
      configWord: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registerAppWithKey(
      configWord: BigNumberish,
      registrationKey: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerAppWithKey(uint256,string)"(
      configWord: BigNumberish,
      registrationKey: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeFromAgreementClassesBitmap(
      bitmap: BigNumberish,
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "removeFromAgreementClassesBitmap(uint256,bytes32)"(
      bitmap: BigNumberish,
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    replaceGovernance(
      newGov: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "replaceGovernance(address)"(
      newGov: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateAgreementClass(
      agreementClassLogic: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateAgreementClass(address)"(
      agreementClassLogic: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateSuperTokenFactory(
      newFactory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateSuperTokenFactory(address)"(
      newFactory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateSuperTokenLogic(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateSuperTokenLogic(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToAgreementClassesBitmap(
      bitmap: BigNumberish,
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addToAgreementClassesBitmap(uint256,bytes32)"(
      bitmap: BigNumberish,
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowCompositeApp(
      targetApp: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "allowCompositeApp(address)"(
      targetApp: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    appCallbackPop(
      ctx: BytesLike,
      appAllowanceUsedDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "appCallbackPop(bytes,int256)"(
      ctx: BytesLike,
      appAllowanceUsedDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    appCallbackPush(
      ctx: BytesLike,
      app: string,
      appAllowanceGranted: BigNumberish,
      appAllowanceUsed: BigNumberish,
      appAllowanceToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "appCallbackPush(bytes,address,uint256,int256,address)"(
      ctx: BytesLike,
      app: string,
      appAllowanceGranted: BigNumberish,
      appAllowanceUsed: BigNumberish,
      appAllowanceToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    batchCall(
      operations: {
        operationType: BigNumberish;
        target: string;
        data: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "batchCall(tuple[])"(
      operations: {
        operationType: BigNumberish;
        target: string;
        data: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    callAgreement(
      agreementClass: string,
      callData: BytesLike,
      userData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "callAgreement(address,bytes,bytes)"(
      agreementClass: string,
      callData: BytesLike,
      userData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    callAgreementWithContext(
      agreementClass: string,
      callData: BytesLike,
      userData: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "callAgreementWithContext(address,bytes,bytes,bytes)"(
      agreementClass: string,
      callData: BytesLike,
      userData: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    callAppAction(
      app: string,
      callData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "callAppAction(address,bytes)"(
      app: string,
      callData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    callAppActionWithContext(
      app: string,
      callData: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "callAppActionWithContext(address,bytes,bytes)"(
      app: string,
      callData: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    callAppAfterCallback(
      app: string,
      callData: BytesLike,
      isTermination: boolean,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "callAppAfterCallback(address,bytes,bool,bytes)"(
      app: string,
      callData: BytesLike,
      isTermination: boolean,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    callAppBeforeCallback(
      app: string,
      callData: BytesLike,
      isTermination: boolean,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "callAppBeforeCallback(address,bytes,bool,bytes)"(
      app: string,
      callData: BytesLike,
      isTermination: boolean,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ctxUseAllowance(
      ctx: BytesLike,
      appAllowanceWantedMore: BigNumberish,
      appAllowanceUsedDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ctxUseAllowance(bytes,uint256,int256)"(
      ctx: BytesLike,
      appAllowanceWantedMore: BigNumberish,
      appAllowanceUsedDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decodeCtx(
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeCtx(bytes)"(
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forwardBatchCall(
      operations: {
        operationType: BigNumberish;
        target: string;
        data: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "forwardBatchCall(tuple[])"(
      operations: {
        operationType: BigNumberish;
        target: string;
        data: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAgreementClass(
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAgreementClass(bytes32)"(
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAppLevel(
      app: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAppLevel(address)"(
      app: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAppManifest(
      app: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAppManifest(address)"(
      app: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGovernance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNow()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSuperTokenFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSuperTokenFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSuperTokenFactoryLogic(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSuperTokenFactoryLogic()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAgreementClassListed(
      agreementClass: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAgreementClassListed(address)"(
      agreementClass: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAgreementTypeListed(
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAgreementTypeListed(bytes32)"(
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApp(
      app: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApp(address)"(
      app: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAppJailed(
      app: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAppJailed(address)"(
      app: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCompositeAppAllowed(
      app: string,
      targetApp: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isCompositeAppAllowed(address,address)"(
      app: string,
      targetApp: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCtxValid(
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isCtxValid(bytes)"(
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jailApp(
      ctx: BytesLike,
      app: string,
      reason: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "jailApp(bytes,address,uint256)"(
      ctx: BytesLike,
      app: string,
      reason: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mapAgreementClasses(
      bitmap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mapAgreementClasses(uint256)"(
      bitmap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerAgreementClass(
      agreementClassLogic: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerAgreementClass(address)"(
      agreementClassLogic: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registerApp(
      configWord: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerApp(uint256)"(
      configWord: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registerAppByFactory(
      app: string,
      configWord: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerAppByFactory(address,uint256)"(
      app: string,
      configWord: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registerAppWithKey(
      configWord: BigNumberish,
      registrationKey: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerAppWithKey(uint256,string)"(
      configWord: BigNumberish,
      registrationKey: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeFromAgreementClassesBitmap(
      bitmap: BigNumberish,
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "removeFromAgreementClassesBitmap(uint256,bytes32)"(
      bitmap: BigNumberish,
      agreementType: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    replaceGovernance(
      newGov: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "replaceGovernance(address)"(
      newGov: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateAgreementClass(
      agreementClassLogic: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateAgreementClass(address)"(
      agreementClassLogic: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateSuperTokenFactory(
      newFactory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateSuperTokenFactory(address)"(
      newFactory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateSuperTokenLogic(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateSuperTokenLogic(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
