/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ISuperTokenFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createERC20Wrapper(address,uint8,string,string)": FunctionFragment;
    "getHost()": FunctionFragment;
    "getSuperTokenLogic()": FunctionFragment;
    "initialize()": FunctionFragment;
    "initializeCustomSuperToken(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createERC20Wrapper",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "getHost", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSuperTokenLogic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeCustomSuperToken",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createERC20Wrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSuperTokenLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeCustomSuperToken",
    data: BytesLike
  ): Result;

  events: {
    "CustomSuperTokenCreated(address)": EventFragment;
    "SuperTokenCreated(address)": EventFragment;
    "SuperTokenLogicCreated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CustomSuperTokenCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SuperTokenCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SuperTokenLogicCreated"): EventFragment;
}

export class ISuperTokenFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ISuperTokenFactoryInterface;

  functions: {
    "createERC20Wrapper(address,uint8,string,string)"(
      underlyingToken: string,
      upgradability: BigNumberish,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createERC20Wrapper(address,uint8,uint8,string,string)"(
      underlyingToken: string,
      underlyingDecimals: BigNumberish,
      upgradability: BigNumberish,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getHost(overrides?: CallOverrides): Promise<[string] & { host: string }>;

    "getHost()"(
      overrides?: CallOverrides
    ): Promise<[string] & { host: string }>;

    getSuperTokenLogic(
      overrides?: CallOverrides
    ): Promise<[string] & { superToken: string }>;

    "getSuperTokenLogic()"(
      overrides?: CallOverrides
    ): Promise<[string] & { superToken: string }>;

    initialize(overrides?: Overrides): Promise<ContractTransaction>;

    "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

    initializeCustomSuperToken(
      customSuperTokenProxy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initializeCustomSuperToken(address)"(
      customSuperTokenProxy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  "createERC20Wrapper(address,uint8,string,string)"(
    underlyingToken: string,
    upgradability: BigNumberish,
    name: string,
    symbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createERC20Wrapper(address,uint8,uint8,string,string)"(
    underlyingToken: string,
    underlyingDecimals: BigNumberish,
    upgradability: BigNumberish,
    name: string,
    symbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getHost(overrides?: CallOverrides): Promise<string>;

  "getHost()"(overrides?: CallOverrides): Promise<string>;

  getSuperTokenLogic(overrides?: CallOverrides): Promise<string>;

  "getSuperTokenLogic()"(overrides?: CallOverrides): Promise<string>;

  initialize(overrides?: Overrides): Promise<ContractTransaction>;

  "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

  initializeCustomSuperToken(
    customSuperTokenProxy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initializeCustomSuperToken(address)"(
    customSuperTokenProxy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    "createERC20Wrapper(address,uint8,string,string)"(
      underlyingToken: string,
      upgradability: BigNumberish,
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createERC20Wrapper(address,uint8,uint8,string,string)"(
      underlyingToken: string,
      underlyingDecimals: BigNumberish,
      upgradability: BigNumberish,
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getHost(overrides?: CallOverrides): Promise<string>;

    "getHost()"(overrides?: CallOverrides): Promise<string>;

    getSuperTokenLogic(overrides?: CallOverrides): Promise<string>;

    "getSuperTokenLogic()"(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    initializeCustomSuperToken(
      customSuperTokenProxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initializeCustomSuperToken(address)"(
      customSuperTokenProxy: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    CustomSuperTokenCreated(token: string | null): EventFilter;

    SuperTokenCreated(token: string | null): EventFilter;

    SuperTokenLogicCreated(tokenLogic: string | null): EventFilter;
  };

  estimateGas: {
    "createERC20Wrapper(address,uint8,string,string)"(
      underlyingToken: string,
      upgradability: BigNumberish,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createERC20Wrapper(address,uint8,uint8,string,string)"(
      underlyingToken: string,
      underlyingDecimals: BigNumberish,
      upgradability: BigNumberish,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getHost(overrides?: CallOverrides): Promise<BigNumber>;

    "getHost()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSuperTokenLogic(overrides?: CallOverrides): Promise<BigNumber>;

    "getSuperTokenLogic()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: Overrides): Promise<BigNumber>;

    "initialize()"(overrides?: Overrides): Promise<BigNumber>;

    initializeCustomSuperToken(
      customSuperTokenProxy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initializeCustomSuperToken(address)"(
      customSuperTokenProxy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "createERC20Wrapper(address,uint8,string,string)"(
      underlyingToken: string,
      upgradability: BigNumberish,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createERC20Wrapper(address,uint8,uint8,string,string)"(
      underlyingToken: string,
      underlyingDecimals: BigNumberish,
      upgradability: BigNumberish,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getHost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getHost()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSuperTokenLogic(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSuperTokenLogic()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initialize()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    initializeCustomSuperToken(
      customSuperTokenProxy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initializeCustomSuperToken(address)"(
      customSuperTokenProxy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
