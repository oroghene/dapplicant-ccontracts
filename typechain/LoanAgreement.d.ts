/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LoanAgreementInterface extends ethers.utils.Interface {
  functions: {
    "_getCollateralFlowRate()": FunctionFragment;
    "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes)": FunctionFragment;
    "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes)": FunctionFragment;
    "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes)": FunctionFragment;
    "applications(uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "beforeAgreementCreated(address,address,bytes32,bytes,bytes)": FunctionFragment;
    "beforeAgreementTerminated(address,address,bytes32,bytes,bytes)": FunctionFragment;
    "beforeAgreementUpdated(address,address,bytes32,bytes,bytes)": FunctionFragment;
    "borrowAmount()": FunctionFragment;
    "borrowToken()": FunctionFragment;
    "borrower()": FunctionFragment;
    "buildApplicationSvg(uint256)": FunctionFragment;
    "cfaV1()": FunctionFragment;
    "closeCompletedLoan()": FunctionFragment;
    "closeOpenLoan(uint256)": FunctionFragment;
    "collateralAmount()": FunctionFragment;
    "collateralToken()": FunctionFragment;
    "getApplicant(uint256)": FunctionFragment;
    "getApplicationApprovalTime(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getPaymentFlowRate()": FunctionFragment;
    "getTotalAmountRemaining()": FunctionFragment;
    "guarantor()": FunctionFragment;
    "interestRate()": FunctionFragment;
    "isActive(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "lend()": FunctionFragment;
    "lender()": FunctionFragment;
    "loanStartTime()": FunctionFragment;
    "mint(uint256,int96,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "paybackMonths()": FunctionFragment;
    "personToCreditScore(address)": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "priceFeedDecimals()": FunctionFragment;
    "randomNum(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sendCollateral()": FunctionFragment;
    "sendLoanAgreementContract(address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setMetadata(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_getCollateralFlowRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "afterAgreementCreated",
    values: [string, string, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterAgreementTerminated",
    values: [string, string, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterAgreementUpdated",
    values: [string, string, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "applications",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "beforeAgreementCreated",
    values: [string, string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAgreementTerminated",
    values: [string, string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAgreementUpdated",
    values: [string, string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "borrower", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buildApplicationSvg",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cfaV1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "closeCompletedLoan",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeOpenLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApplicant",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApplicationApprovalTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentFlowRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAmountRemaining",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "guarantor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "interestRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "lend", values?: undefined): string;
  encodeFunctionData(functionFragment: "lender", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "loanStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paybackMonths",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "personToCreditScore",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceFeedDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomNum",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendLoanAgreementContract",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "_getCollateralFlowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterAgreementCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterAgreementTerminated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterAgreementUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beforeAgreementCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeAgreementTerminated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeAgreementUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrower", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buildApplicationSvg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cfaV1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeCompletedLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeOpenLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApplicant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApplicationApprovalTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentFlowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAmountRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guarantor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lender", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "loanStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paybackMonths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "personToCreditScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceFeedDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "randomNum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendLoanAgreementContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class LoanAgreement extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LoanAgreementInterface;

  functions: {
    _getCollateralFlowRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralFlowRate: BigNumber }>;

    "_getCollateralFlowRate()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralFlowRate: BigNumber }>;

    afterAgreementCreated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes)"(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    afterAgreementTerminated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes)"(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    afterAgreementUpdated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes)"(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    applications(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        number,
        BigNumber,
        string,
        string
      ] & {
        applicant: string;
        applicationID: BigNumber;
        borrowToken: string;
        collateralToken: string;
        borrowAmount: BigNumber;
        interestRate: BigNumber;
        durationInMonths: BigNumber;
        collateralAmount: BigNumber;
        guarantor: string;
        submittedTime: BigNumber;
        status: number;
        amountPaid: BigNumber;
        textHue: string;
        bgHue: string;
      }
    >;

    "applications(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        number,
        BigNumber,
        string,
        string
      ] & {
        applicant: string;
        applicationID: BigNumber;
        borrowToken: string;
        collateralToken: string;
        borrowAmount: BigNumber;
        interestRate: BigNumber;
        durationInMonths: BigNumber;
        collateralAmount: BigNumber;
        guarantor: string;
        submittedTime: BigNumber;
        status: number;
        amountPaid: BigNumber;
        textHue: string;
        bgHue: string;
      }
    >;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    beforeAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "beforeAgreementCreated(address,address,bytes32,bytes,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    beforeAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "beforeAgreementTerminated(address,address,bytes32,bytes,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    beforeAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "beforeAgreementUpdated(address,address,bytes32,bytes,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    borrowAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "borrowAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowToken(overrides?: CallOverrides): Promise<[string]>;

    "borrowToken()"(overrides?: CallOverrides): Promise<[string]>;

    borrower(overrides?: CallOverrides): Promise<[string]>;

    "borrower()"(overrides?: CallOverrides): Promise<[string]>;

    buildApplicationSvg(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "buildApplicationSvg(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    cfaV1(
      overrides?: CallOverrides
    ): Promise<[string, string] & { host: string; cfa: string }>;

    "cfaV1()"(
      overrides?: CallOverrides
    ): Promise<[string, string] & { host: string; cfa: string }>;

    closeCompletedLoan(overrides?: Overrides): Promise<ContractTransaction>;

    "closeCompletedLoan()"(overrides?: Overrides): Promise<ContractTransaction>;

    closeOpenLoan(
      amountForPayoff: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "closeOpenLoan(uint256)"(
      amountForPayoff: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    collateralAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "collateralAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    "collateralToken()"(overrides?: CallOverrides): Promise<[string]>;

    getApplicant(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getApplicant(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getApplicationApprovalTime(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getApplicationApprovalTime(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPaymentFlowRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { paymentFlowRate: BigNumber }>;

    "getPaymentFlowRate()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { paymentFlowRate: BigNumber }>;

    getTotalAmountRemaining(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTotalAmountRemaining()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    guarantor(overrides?: CallOverrides): Promise<[string]>;

    "guarantor()"(overrides?: CallOverrides): Promise<[string]>;

    interestRate(overrides?: CallOverrides): Promise<[number]>;

    "interestRate()"(overrides?: CallOverrides): Promise<[number]>;

    isActive(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isActive(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lend(overrides?: Overrides): Promise<ContractTransaction>;

    "lend()"(overrides?: Overrides): Promise<ContractTransaction>;

    lender(overrides?: CallOverrides): Promise<[string]>;

    "lender()"(overrides?: CallOverrides): Promise<[string]>;

    loanStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "loanStartTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      _borrowAmount: BigNumberish,
      _interestRate: BigNumberish,
      _principalAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "mint(uint256,int96,uint256)"(
      _borrowAmount: BigNumberish,
      _interestRate: BigNumberish,
      _principalAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    paybackMonths(overrides?: CallOverrides): Promise<[BigNumber]>;

    "paybackMonths()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    personToCreditScore(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "personToCreditScore(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    "priceFeed()"(overrides?: CallOverrides): Promise<[string]>;

    priceFeedDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    "priceFeedDecimals()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    randomNum(
      _mod: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "randomNum(uint256,uint256)"(
      _mod: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    sendCollateral(overrides?: Overrides): Promise<ContractTransaction>;

    "sendCollateral()"(overrides?: Overrides): Promise<ContractTransaction>;

    sendLoanAgreementContract(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sendLoanAgreementContract(address,uint256)"(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMetadata(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "setMetadata(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenURI(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  _getCollateralFlowRate(overrides?: CallOverrides): Promise<BigNumber>;

  "_getCollateralFlowRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  afterAgreementCreated(
    _superToken: string,
    _agreementClass: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    ctx: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes)"(
    _superToken: string,
    _agreementClass: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    ctx: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  afterAgreementTerminated(
    _superToken: string,
    _agreementClass: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    ctx: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes)"(
    _superToken: string,
    _agreementClass: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    ctx: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  afterAgreementUpdated(
    _superToken: string,
    _agreementClass: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    ctx: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes)"(
    _superToken: string,
    _agreementClass: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    ctx: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  applications(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      number,
      BigNumber,
      string,
      string
    ] & {
      applicant: string;
      applicationID: BigNumber;
      borrowToken: string;
      collateralToken: string;
      borrowAmount: BigNumber;
      interestRate: BigNumber;
      durationInMonths: BigNumber;
      collateralAmount: BigNumber;
      guarantor: string;
      submittedTime: BigNumber;
      status: number;
      amountPaid: BigNumber;
      textHue: string;
      bgHue: string;
    }
  >;

  "applications(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      number,
      BigNumber,
      string,
      string
    ] & {
      applicant: string;
      applicationID: BigNumber;
      borrowToken: string;
      collateralToken: string;
      borrowAmount: BigNumber;
      interestRate: BigNumber;
      durationInMonths: BigNumber;
      collateralAmount: BigNumber;
      guarantor: string;
      submittedTime: BigNumber;
      status: number;
      amountPaid: BigNumber;
      textHue: string;
      bgHue: string;
    }
  >;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  beforeAgreementCreated(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "beforeAgreementCreated(address,address,bytes32,bytes,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  beforeAgreementTerminated(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "beforeAgreementTerminated(address,address,bytes32,bytes,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  beforeAgreementUpdated(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "beforeAgreementUpdated(address,address,bytes32,bytes,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  borrowAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "borrowAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  borrowToken(overrides?: CallOverrides): Promise<string>;

  "borrowToken()"(overrides?: CallOverrides): Promise<string>;

  borrower(overrides?: CallOverrides): Promise<string>;

  "borrower()"(overrides?: CallOverrides): Promise<string>;

  buildApplicationSvg(
    _appID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "buildApplicationSvg(uint256)"(
    _appID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  cfaV1(
    overrides?: CallOverrides
  ): Promise<[string, string] & { host: string; cfa: string }>;

  "cfaV1()"(
    overrides?: CallOverrides
  ): Promise<[string, string] & { host: string; cfa: string }>;

  closeCompletedLoan(overrides?: Overrides): Promise<ContractTransaction>;

  "closeCompletedLoan()"(overrides?: Overrides): Promise<ContractTransaction>;

  closeOpenLoan(
    amountForPayoff: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "closeOpenLoan(uint256)"(
    amountForPayoff: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  collateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "collateralAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  collateralToken(overrides?: CallOverrides): Promise<string>;

  "collateralToken()"(overrides?: CallOverrides): Promise<string>;

  getApplicant(
    _appID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApplicant(uint256)"(
    _appID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getApplicationApprovalTime(
    _appID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getApplicationApprovalTime(uint256)"(
    _appID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPaymentFlowRate(overrides?: CallOverrides): Promise<BigNumber>;

  "getPaymentFlowRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalAmountRemaining(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalAmountRemaining()"(overrides?: CallOverrides): Promise<BigNumber>;

  guarantor(overrides?: CallOverrides): Promise<string>;

  "guarantor()"(overrides?: CallOverrides): Promise<string>;

  interestRate(overrides?: CallOverrides): Promise<number>;

  "interestRate()"(overrides?: CallOverrides): Promise<number>;

  isActive(_appID: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "isActive(uint256)"(
    _appID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lend(overrides?: Overrides): Promise<ContractTransaction>;

  "lend()"(overrides?: Overrides): Promise<ContractTransaction>;

  lender(overrides?: CallOverrides): Promise<string>;

  "lender()"(overrides?: CallOverrides): Promise<string>;

  loanStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  "loanStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    _borrowAmount: BigNumberish,
    _interestRate: BigNumberish,
    _principalAmount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "mint(uint256,int96,uint256)"(
    _borrowAmount: BigNumberish,
    _interestRate: BigNumberish,
    _principalAmount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  paybackMonths(overrides?: CallOverrides): Promise<BigNumber>;

  "paybackMonths()"(overrides?: CallOverrides): Promise<BigNumber>;

  personToCreditScore(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "personToCreditScore(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  "priceFeed()"(overrides?: CallOverrides): Promise<string>;

  priceFeedDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  "priceFeedDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

  randomNum(
    _mod: BigNumberish,
    _seed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "randomNum(uint256,uint256)"(
    _mod: BigNumberish,
    _seed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  sendCollateral(overrides?: Overrides): Promise<ContractTransaction>;

  "sendCollateral()"(overrides?: Overrides): Promise<ContractTransaction>;

  sendLoanAgreementContract(
    _receiver: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sendLoanAgreementContract(address,uint256)"(
    _receiver: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMetadata(_appID: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "setMetadata(uint256)"(
    _appID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  tokenURI(_appID: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenURI(uint256)"(
    _appID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    _getCollateralFlowRate(overrides?: CallOverrides): Promise<BigNumber>;

    "_getCollateralFlowRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    afterAgreementCreated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes)"(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    afterAgreementTerminated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes)"(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    afterAgreementUpdated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes)"(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    applications(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        number,
        BigNumber,
        string,
        string
      ] & {
        applicant: string;
        applicationID: BigNumber;
        borrowToken: string;
        collateralToken: string;
        borrowAmount: BigNumber;
        interestRate: BigNumber;
        durationInMonths: BigNumber;
        collateralAmount: BigNumber;
        guarantor: string;
        submittedTime: BigNumber;
        status: number;
        amountPaid: BigNumber;
        textHue: string;
        bgHue: string;
      }
    >;

    "applications(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        number,
        BigNumber,
        string,
        string
      ] & {
        applicant: string;
        applicationID: BigNumber;
        borrowToken: string;
        collateralToken: string;
        borrowAmount: BigNumber;
        interestRate: BigNumber;
        durationInMonths: BigNumber;
        collateralAmount: BigNumber;
        guarantor: string;
        submittedTime: BigNumber;
        status: number;
        amountPaid: BigNumber;
        textHue: string;
        bgHue: string;
      }
    >;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "beforeAgreementCreated(address,address,bytes32,bytes,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    beforeAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "beforeAgreementTerminated(address,address,bytes32,bytes,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    beforeAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "beforeAgreementUpdated(address,address,bytes32,bytes,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    borrowAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    borrowToken(overrides?: CallOverrides): Promise<string>;

    "borrowToken()"(overrides?: CallOverrides): Promise<string>;

    borrower(overrides?: CallOverrides): Promise<string>;

    "borrower()"(overrides?: CallOverrides): Promise<string>;

    buildApplicationSvg(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "buildApplicationSvg(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    cfaV1(
      overrides?: CallOverrides
    ): Promise<[string, string] & { host: string; cfa: string }>;

    "cfaV1()"(
      overrides?: CallOverrides
    ): Promise<[string, string] & { host: string; cfa: string }>;

    closeCompletedLoan(overrides?: CallOverrides): Promise<void>;

    "closeCompletedLoan()"(overrides?: CallOverrides): Promise<void>;

    closeOpenLoan(
      amountForPayoff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "closeOpenLoan(uint256)"(
      amountForPayoff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<string>;

    "collateralToken()"(overrides?: CallOverrides): Promise<string>;

    getApplicant(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApplicant(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getApplicationApprovalTime(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApplicationApprovalTime(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPaymentFlowRate(overrides?: CallOverrides): Promise<BigNumber>;

    "getPaymentFlowRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalAmountRemaining(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalAmountRemaining()"(overrides?: CallOverrides): Promise<BigNumber>;

    guarantor(overrides?: CallOverrides): Promise<string>;

    "guarantor()"(overrides?: CallOverrides): Promise<string>;

    interestRate(overrides?: CallOverrides): Promise<number>;

    "interestRate()"(overrides?: CallOverrides): Promise<number>;

    isActive(_appID: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "isActive(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lend(overrides?: CallOverrides): Promise<void>;

    "lend()"(overrides?: CallOverrides): Promise<void>;

    lender(overrides?: CallOverrides): Promise<string>;

    "lender()"(overrides?: CallOverrides): Promise<string>;

    loanStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "loanStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _borrowAmount: BigNumberish,
      _interestRate: BigNumberish,
      _principalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(uint256,int96,uint256)"(
      _borrowAmount: BigNumberish,
      _interestRate: BigNumberish,
      _principalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    paybackMonths(overrides?: CallOverrides): Promise<BigNumber>;

    "paybackMonths()"(overrides?: CallOverrides): Promise<BigNumber>;

    personToCreditScore(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "personToCreditScore(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    "priceFeed()"(overrides?: CallOverrides): Promise<string>;

    priceFeedDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "priceFeedDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    randomNum(
      _mod: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "randomNum(uint256,uint256)"(
      _mod: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    sendCollateral(overrides?: CallOverrides): Promise<void>;

    "sendCollateral()"(overrides?: CallOverrides): Promise<void>;

    sendLoanAgreementContract(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendLoanAgreementContract(address,uint256)"(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetadata(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "setMetadata(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    tokenURI(_appID: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "tokenURI(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Paused(account: null): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    _getCollateralFlowRate(overrides?: CallOverrides): Promise<BigNumber>;

    "_getCollateralFlowRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    afterAgreementCreated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes)"(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    afterAgreementTerminated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes)"(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    afterAgreementUpdated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes)"(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    applications(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "applications(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "beforeAgreementCreated(address,address,bytes32,bytes,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "beforeAgreementTerminated(address,address,bytes32,bytes,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "beforeAgreementUpdated(address,address,bytes32,bytes,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    borrowToken(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    borrower(overrides?: CallOverrides): Promise<BigNumber>;

    "borrower()"(overrides?: CallOverrides): Promise<BigNumber>;

    buildApplicationSvg(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buildApplicationSvg(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cfaV1(overrides?: CallOverrides): Promise<BigNumber>;

    "cfaV1()"(overrides?: CallOverrides): Promise<BigNumber>;

    closeCompletedLoan(overrides?: Overrides): Promise<BigNumber>;

    "closeCompletedLoan()"(overrides?: Overrides): Promise<BigNumber>;

    closeOpenLoan(
      amountForPayoff: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "closeOpenLoan(uint256)"(
      amountForPayoff: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    collateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getApplicant(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApplicant(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApplicationApprovalTime(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApplicationApprovalTime(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentFlowRate(overrides?: CallOverrides): Promise<BigNumber>;

    "getPaymentFlowRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalAmountRemaining(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalAmountRemaining()"(overrides?: CallOverrides): Promise<BigNumber>;

    guarantor(overrides?: CallOverrides): Promise<BigNumber>;

    "guarantor()"(overrides?: CallOverrides): Promise<BigNumber>;

    interestRate(overrides?: CallOverrides): Promise<BigNumber>;

    "interestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    isActive(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isActive(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lend(overrides?: Overrides): Promise<BigNumber>;

    "lend()"(overrides?: Overrides): Promise<BigNumber>;

    lender(overrides?: CallOverrides): Promise<BigNumber>;

    "lender()"(overrides?: CallOverrides): Promise<BigNumber>;

    loanStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "loanStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _borrowAmount: BigNumberish,
      _interestRate: BigNumberish,
      _principalAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "mint(uint256,int96,uint256)"(
      _borrowAmount: BigNumberish,
      _interestRate: BigNumberish,
      _principalAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    paybackMonths(overrides?: CallOverrides): Promise<BigNumber>;

    "paybackMonths()"(overrides?: CallOverrides): Promise<BigNumber>;

    personToCreditScore(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "personToCreditScore(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    "priceFeed()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeedDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "priceFeedDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    randomNum(
      _mod: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "randomNum(uint256,uint256)"(
      _mod: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    sendCollateral(overrides?: Overrides): Promise<BigNumber>;

    "sendCollateral()"(overrides?: Overrides): Promise<BigNumber>;

    sendLoanAgreementContract(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sendLoanAgreementContract(address,uint256)"(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMetadata(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "setMetadata(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    "unpause()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _getCollateralFlowRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_getCollateralFlowRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    afterAgreementCreated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes)"(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    afterAgreementTerminated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes)"(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    afterAgreementUpdated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes)"(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      ctx: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    applications(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "applications(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beforeAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "beforeAgreementCreated(address,address,bytes32,bytes,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beforeAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "beforeAgreementTerminated(address,address,bytes32,bytes,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beforeAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "beforeAgreementUpdated(address,address,bytes32,bytes,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "borrowAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "borrowToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "borrower()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buildApplicationSvg(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "buildApplicationSvg(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cfaV1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cfaV1()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closeCompletedLoan(overrides?: Overrides): Promise<PopulatedTransaction>;

    "closeCompletedLoan()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    closeOpenLoan(
      amountForPayoff: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "closeOpenLoan(uint256)"(
      amountForPayoff: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    collateralAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateralAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateralToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApplicant(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApplicant(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApplicationApprovalTime(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApplicationApprovalTime(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaymentFlowRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPaymentFlowRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalAmountRemaining(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalAmountRemaining()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guarantor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "guarantor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interestRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "interestRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isActive(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isActive(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lend(overrides?: Overrides): Promise<PopulatedTransaction>;

    "lend()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    lender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lender()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loanStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "loanStartTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _borrowAmount: BigNumberish,
      _interestRate: BigNumberish,
      _principalAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "mint(uint256,int96,uint256)"(
      _borrowAmount: BigNumberish,
      _interestRate: BigNumberish,
      _principalAmount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paybackMonths(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paybackMonths()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    personToCreditScore(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "personToCreditScore(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "priceFeed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeedDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "priceFeedDecimals()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    randomNum(
      _mod: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "randomNum(uint256,uint256)"(
      _mod: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    sendCollateral(overrides?: Overrides): Promise<PopulatedTransaction>;

    "sendCollateral()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    sendLoanAgreementContract(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sendLoanAgreementContract(address,uint256)"(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMetadata(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "setMetadata(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      _appID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
